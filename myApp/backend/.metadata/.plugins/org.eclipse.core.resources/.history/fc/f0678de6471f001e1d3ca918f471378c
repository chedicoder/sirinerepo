package com.example.demo.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.dto.AuthResponseDTO;
import com.example.demo.dto.LoginDto;
import com.example.demo.dto.RegisterDto;
import com.example.demo.entities.Role;
import com.example.demo.entities.User;
import com.example.demo.repositories.RoleRepository;
import com.example.demo.repositories.UserRepository;
import com.example.demo.security.JWTGenerator;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin
public class AuthController {

    private AuthenticationManager authenticationManager;
    private UserRepository userRepository;
    private RoleRepository roleRepository;
    private PasswordEncoder passwordEncoder;
    private JWTGenerator jwtGenerator;

    @Autowired
    public AuthController(AuthenticationManager authenticationManager, UserRepository userRepository,RoleRepository
                         roleRepository,  PasswordEncoder passwordEncoder, JWTGenerator jwtGenerator) {
        this.authenticationManager = authenticationManager;
        this.userRepository = userRepository;
       this.roleRepository=roleRepository;
        this.passwordEncoder = passwordEncoder;
        this.jwtGenerator = jwtGenerator;
    }

    @PostMapping("/login")
    public ResponseEntity<AuthResponseDTO> login(@RequestBody LoginDto loginDto){
    
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                loginDto.getUsername(),
                loginDto.getPassword()));
        SecurityContextHolder.getContext().setAuthentication(authentication);
        String token = jwtGenerator.generateToken(authentication);
        return new ResponseEntity<>(new AuthResponseDTO(token), HttpStatus.OK);
    }


    @PostMapping("/register")
    public ResponseEntity<String> register(@RequestBody RegisterDto registerDto) {
        if (userRepository.existsByUsername(registerDto.getUsername())) {
            return new ResponseEntity<>("Username is taken!", HttpStatus.BAD_REQUEST);
        }
        if (userRepository.existsByEmail(registerDto.getEmail())) {
            return new ResponseEntity<>("Email is used!", HttpStatus.BAD_REQUEST);
        }

        User user = new User();
        user.setUsername(registerDto.getUsername());
        user.setFirst_Name(registerDto.getFirst_Name());
        user.setLast_Name(registerDto.getLast_Name());
        user.setPassword(passwordEncoder.encode(registerDto.getPassword()));
        user.setEmail(registerDto.getEmail());
        user.setPhone_Number(registerDto.getPhone_Number());
        user.setIsactive(false);
        user.setIsapprouved(false);
        user.setCreated_at(new java.sql.Date(System.currentTimeMillis()));

        if ("Client".equals(registerDto.getRole())) {
        	
            Role role = roleRepository.findById(3).orElse(null);
                user.setRole(role);
                 userRepository.save(user);
                 role.getUsers().add(user);
                 roleRepository.save(role);
                 return new ResponseEntity<>("User registered successfully!", HttpStatus.OK);
            
        } else if ("Consultant".equals(registerDto.getRole())) {
        	Role role = roleRepository.findById(2).orElse(null);
            user.setRole(role);
             userRepository.save(user);
             role.getUsers().add(user);
             roleRepository.save(role);
             return new ResponseEntity<>("User registered successfully!", HttpStatus.OK);
        
        } else if ("Administrateur".equals(registerDto.getRole())) {
        	Role role = roleRepository.findById(1).orElse(null);
            user.setRole(role);
             userRepository.save(user);
             role.getUsers().add(user);
             roleRepository.save(role);
             return new ResponseEntity<>("User registered successfully!", HttpStatus.OK);
        
        }


        return new ResponseEntity<>("User not registred!", HttpStatus.BAD_REQUEST);
    }
    
}
